// Jake Leonard
// 2012/01/23
// All content (c) 2012 DigiPen (USA) Corporation, all rights reserved.

#pragma once
#include "../Containers/String.h"
#include "../Utilities/Variable.h"
#include <vector>
#include <queue>

namespace Improbability
{
  /* Hooks Python into the Messaging System to capture all the events */
  class PyMessaging 
  {
    public:
      static void MakePyModule();

      static void Update();

      /* Python capturing C++ Events and sending them to Python */
      static void CaptureEvent(const String &msg);
      static void CaptureEvent(const String &msg, Variable &var1);
      static void CaptureEvent(const String &msg, Variable &var1, Variable &var2);
      static void CaptureEvent(const String &msg, Variable &var1, Variable &var2, Variable &var3);
      static void CaptureEvent(const String &msg, Variable &var1, Variable &var2, Variable &var3, Variable &var4);

      /* Python calling C++ Events from Python */
      static void DispatchEvent(const String &msg);
      static void DispatchEvent(const String &msg, Variable const &var1);
      static void DispatchEvent(const String &msg, Variable const &var1, Variable const &var2);
      static void DispatchEvent(const String &msg, Variable const &var1, Variable const &var2, Variable const &var3);
      static void DispatchEvent(const String &msg, Variable const &var1, Variable const &var2, Variable const &var3, Variable const &var4);

      /* Python Registering for Events */
      static void RegisterEvent(const String &eventName);
      static void RegisterEvent(const String &eventName, String pyCode);
      static void RegisterEvent(const String &eventName, String pyFunc, PyObject* obj);
      static void RegisterEvent(const String &eventName, String pyFunc, PyObject* obj, String code);

    private:
      /* C++ Event Generated by Python */
      struct PyEvent
      {
        String eventName;
        std::vector<Variable> args;
      };

      /* Python Event Generated by C++ */
      struct PyListener
      {
        PyListener(String eName);
        PyListener(String eName, String code);
        PyListener(String eName, String pyFunc, PyObject* obj);
        PyListener(String eName, String pyFunc, PyObject* obj, String code);
        ~PyListener();

        /* Various Things that can happen */
        enum ListenerType
        {
          Log,
          ExecCode,
          ExecMember,
          ExecMemberWFunc,
          None
        };

        void Execute();
        void Execute(Variable var1);
        void Execute(Variable var1, Variable var2);
        void Execute(Variable var1, Variable var2, Variable var3);
        void Execute(Variable var1, Variable var2, Variable var3, Variable var4);

        ListenerType eventType;
        String eventName;
        String pyCode;
        String pyFunction;
        PyObject* object;
      };
      typedef std::vector<PyListener> ListenerList;
      static bool sm_IsFiring;
      static std::queue<PyEvent> sm_pyEventQueue;
      static HashMap<String, ListenerList> sm_pyEvents;
  };
}
